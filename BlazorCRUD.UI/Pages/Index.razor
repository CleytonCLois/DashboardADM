@page "/"

@using Model
@using Interfaces
@inject HttpClient https
@inject IGraficoServico GraficoServico
@inject IPrefeituraServico PrefeituraServico
@inject IConfiguracaoServico ConfiguracaoServico

@if (prefeituras == null)
{
    <div class="loading">
        <img src="imgLoading.png" style="display: block; margin-left: auto; margin-right: auto">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px; align-self: center;" />
        <h3 style=" align-self: center;">Aguarde até carregar todos os dados.</h3>
    </div>
}
else
{
    <div class="row" style="border: 15px solid transparent; text-align: center; padding: 0px 0px;">
        <div class="cpanel cpanel-blue">
            <div class="icon-part">
                <i class="fas fa-check" aria-hidden="true"></i><br>
                <small>Prefeituras atualizadas</small>
                <p>@prefeiturasAtualizadasCount.ToString()</p>
            </div>
            <div class="card-content-part">
                <a href="PrefeiturasAtualizadas">Mais Detalhes +</a>
            </div>
        </div>
        <div class="cpanel cpanel-green">
            <div class="icon-part">
                <i class="fas fa-clock" aria-hidden="true"></i><br>
                <small>Prefeituras atualizadas nas últimas 24hrs</small>
                <p>@prefeiturasAtualizadasUltimas24hrsCount.ToString()</p>
            </div>
            <div class="card-content-part">
                <a href="PrefeiturasAtualizadas24hrs">Mais Detalhes +</a>
            </div>
        </div>
        <div class="cpanel cpanel-orange">
            <div class="icon-part">
                <i class="fas fa-exclamation-circle" aria-hidden="true"></i><br>
                <small>Prefeituras desatualizadas</small>
                <p>@prefeiturasDesatualizadasCount.ToString()</p>
            </div>
            <div class="card-content-part">
                <a href="PrefeiturasDesatualizadas">Mais Detalhes + </a>
            </div>
        </div>
        <div class="cpanel cpanel-red">
            <div class="icon-part">
                <i class="fas fa-times-circle" aria-hidden="true"></i><br>
                <small>Prefeituras desatualizadas por mais de 24Hrs</small>
                <p>@prefeiturasDesatualizadasMaisDeUmaSemanaCount.ToString()</p>
            </div>
            <div class="card-content-part">
                <a href="PrefeiturasDesatualizadasMaisDeUmaSemana">Mais Detalhes + </a>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <h5 class="card-header">Gráfico Barra Prefeituras</h5>
                <div class="card-body">
                    <RadzenChart>
                        <RadzenColumnSeries Data="@prefeiturasAtualizadas" Title="Atualizadas hoje" LineType="LineType.Dashed" ValueProperty="valores" />
                        <RadzenColumnSeries Data="@prefeiturasAtualizadas24hrs" Title="Atualizadas nas últimas 24hrs" ValueProperty="valores" />
                        <RadzenColumnSeries Data="@prefeiturasDesatualizadas" Title="Desatualizadas" ValueProperty="valores" />
                        <RadzenColumnSeries Data="@prefeiturasDesatualizadasMaisDeUmaSemana" Title="Desatualizadas a mais De 1 semana" ValueProperty="valores" />
                        <RadzenColumnOptions Radius="5" />
                        <RadzenValueAxis>
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="Prefeituras" />
                        </RadzenValueAxis>
                    </RadzenChart>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <h5 class="card-header">Gráfico Circular Prefeituras</h5>
                <div class="card-body">
                    <RadzenChart>
                        <RadzenDonutSeries Data="@graficoCircularPrefeiturasDesatualizadas" CategoryProperty="texto" Title="Quantidade de Prefeituras" ValueProperty="valores">
                            <TitleTemplate>
                                <div class="rz-donut-content">
                                    <div>Prefeituras</div>
                                    <div>Desatualizadas</div>
                                </div>
                            </TitleTemplate>
                        </RadzenDonutSeries>
                    </RadzenChart>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <h5 class="card-header">Lista de Prefeituras</h5>
                <div class="card-body">
                    <RadzenDataGrid Data=@filtro FilterMode="FilterMode.Simple" AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="Prefeitura" Style="margin-bottom: 50px; color:red;">
                        <Columns>
                            <RadzenDataGridColumn TItem="Prefeitura" Property="id" Title="ID" />
                            <RadzenDataGridColumn TItem="Prefeitura" Property="nomePrefeitura" Title="Nome da Prefeitura" />
                            <RadzenDataGridColumn TItem="Prefeitura" Property="ultimaAtualizacao" Title="Última Atualização" />
                            <RadzenDataGridColumn TItem="Prefeitura" Property="situacao" Title="Situação da Prefeitura">
                                <Template Context="data">
                                    @if (data.situacao == "Desatualizada por mais de uma semana")
                                    {
                                        <span style='color:red'>@data.situacao</span>
                                    }
                                    else if (data.situacao == "Desatualizada")
                                    {
                                        <span style='color: #ff6d41'>@data.situacao</span>
                                    }
                                    else
                                    {
                                        <span style='color:#5b707b'>@data.situacao</span>
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </div>
            </div>
        </div>
    </div>
}

@code {

    GraficoBarra atualizados = new GraficoBarra();
    GraficoBarra atualizados24hrs = new GraficoBarra();
    GraficoBarra desatualizados = new GraficoBarra();
    GraficoBarra desatualizadosMaisDeUmaSemana = new GraficoBarra();

    private IEnumerable<Prefeitura> prefeituras;
    List<Grafico> graficoCircularPrefeiturasDesatualizadas = new List<Grafico>();
    List<Grafico> prefeiturasAtualizadas = new List<Grafico>();
    List<Grafico> prefeiturasAtualizadas24hrs = new List<Grafico>();
    List<Grafico> prefeiturasDesatualizadas = new List<Grafico>();
    List<Grafico> prefeiturasDesatualizadasMaisDeUmaSemana = new List<Grafico>();

    double prefeiturasAtualizadasCount = 0,
    prefeiturasAtualizadasUltimas24hrsCount = 0,
    prefeiturasDesatualizadasCount = 0,
    prefeiturasDesatualizadasMaisDeUmaSemanaCount = 0;

    IEnumerable<Prefeitura> filtro;

    [Inject]
    public NavigationManager navigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            prefeituras = await PrefeituraServico.TodasPrefeituras();
            InserirDados(prefeituras);

            filtro = await PreencherTabelaPrincipalPrefeituras(prefeituras);
            //Task.Delay(ConfiguracaoServico.ConfiguracaoAtual()).ContinueWith(t => AtualizarPagina());
        }
        catch (Exception)
        {
            throw;
        }
    }

    public void AtualizarPagina()
    {
        navigationManager.NavigateTo("/PrefeiturasAtualizadas", true);
    }

    public async Task<IEnumerable<Prefeitura>> PreencherTabelaPrincipalPrefeituras(IEnumerable<Prefeitura> prefeituras)
    {
        List<Prefeitura> listaPrefeituras = new List<Prefeitura>();

        foreach (var item in prefeituras)
        {
            if(item.situacao == "4") {
                item.situacao = "Desatualizada por mais de uma semana";
                listaPrefeituras.Add(item);
            }
            if (item.situacao == "3" && prefeiturasDesatualizadasMaisDeUmaSemanaCount == 0) {
                item.situacao = "Desatualizada";
                listaPrefeituras.Add(item);
            }
            if (item.situacao == "2" && prefeiturasDesatualizadasCount == 0 && prefeiturasDesatualizadasMaisDeUmaSemanaCount == 0) {
                item.situacao = "Atualizada nas últimas 24hrs";
                listaPrefeituras.Add(item);
            }
            if(item.situacao == "1" && prefeiturasAtualizadasUltimas24hrsCount == 0 && prefeiturasDesatualizadasMaisDeUmaSemanaCount == 0) {
                item.situacao = "Atualizada";
                listaPrefeituras.Add(item);
            }
        }

        return listaPrefeituras;
    }

    public async Task<IEnumerable<Prefeitura>> PreencherTabelaPrefeituras()
    {
        return await PrefeituraServico.ListaDePrefeituras(4);
    }

    public void InserirDados(IEnumerable<Prefeitura> prefeituras)
    {
        foreach (var item in prefeituras)
        {
            switch (item.situacao)
            {
                case "1":
                    prefeiturasAtualizadasCount++;
                    break;
                case "2":
                    prefeiturasAtualizadasUltimas24hrsCount++;
                    break;
                case "3":
                    prefeiturasDesatualizadasCount++;
                    break;
                case "4":
                    prefeiturasDesatualizadasMaisDeUmaSemanaCount++;
                    break;
            }
        }

        prefeiturasAtualizadas.Add(new Grafico() { texto = "Prefeituras Atualizadas", valores = prefeiturasAtualizadasCount });
        prefeiturasAtualizadas24hrs.Add(new Grafico() { texto = "Prefeituras Atualizadas Últimas 24hrs", valores = prefeiturasAtualizadasUltimas24hrsCount });
        prefeiturasDesatualizadas.Add(new Grafico() { texto = "Prefeituras Desatualizadas", valores = prefeiturasDesatualizadasCount });
        prefeiturasDesatualizadasMaisDeUmaSemana.Add(new Grafico() { texto = "Prefeituras Por mais de Uma Semana", valores = prefeiturasDesatualizadasMaisDeUmaSemanaCount });

        graficoCircularPrefeiturasDesatualizadas.Add(new Grafico() { texto = "Prefeituras Desatualizadas", valores = prefeiturasDesatualizadasCount });
        graficoCircularPrefeiturasDesatualizadas.Add(new Grafico() { texto = "Prefeituras Por mais de Uma Semana", valores = prefeiturasDesatualizadasMaisDeUmaSemanaCount });
    }
}

@*http://www.macoratti.net/20/07/blz_awebapi1.htm tutorial utilizado para consumir api*@
@*https://www.bootdey.com/snippets/view/Gradients-dashboard-cards#css componente do card*@
@*https://blazor.radzen.com/dashboard outros componentes*@
@*https://useiconic.com/open icones utilizados*@
@*https://www.nicesnippets.com/snippet/admin-panel-dashboard-card-design-usign-html-and-css cards*@
