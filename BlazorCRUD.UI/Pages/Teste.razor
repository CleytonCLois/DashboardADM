@page "/Teste"

@using Model
@using Interfaces
@inject HttpClient https
@inject IGraficoServico GraficoServico
@inject IPrefeituraServico PrefeituraServico
@inject IConfiguracaoServico ConfiguracaoServico
@inject NavigationManager navigationManager

@if (grafico == null)
{
    <div class="loading">
        <img src="imgLoading.png" style="display: block; margin-left: auto; margin-right: auto">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px; align-self: center;" />
        <h3 style=" align-self: center;">Aguarde até carregar todos os dados.</h3>
    </div>
}
else
{

    <div class="row">
        <div class="col-md-9">
            <div class="card">
                <h5 class="card-header">Lista dos maiores emissores de NF-e</h5>
                <div class="card-body">
                    <RadzenChart>
                        <RadzenBarSeries Data="@grafico" CategoryProperty="texto" Title="NF-e" LineType="LineType.Dashed" ValueProperty="valores" />
                        <RadzenLegend Visible="false" />
                    </RadzenChart>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card">
                <h5 class="card-header">Lista de prefeituras</h5>
                <div class="card-body">
                    <MudCarousel Style="height:300px;" TData="Grafico" ShowArrows="false" ShowDelimiters="false" AutoCycle="true">
                        @foreach (var item in grafico)
                        {
                            <MudCarouselItem Transition="Transition.Slide" Color="@Color.Primary">
                                <div class="row">
                                    <div class="col-md-6">
                                        <b>Prefeitura:</b>
                                        <div>@item.texto</div>
                                        <div style="margin-top:20px; width:600px"><b>Nº de notas emitidas:</b></div>
                                        <div>@(item.valores.ToString())</div>
                                        <br />
                                        <img src="data:image;base64,@System.Convert.ToBase64String(item.logo)" />
                                    </div>
                                </div>
                            </MudCarouselItem>
                        }
                    </MudCarousel>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <h5 class="card-header">Lista dos maiores emissores de NF-e</h5>
                <div class="card-body">
                    <RadzenChart>
                        <RadzenColumnSeries Data="@tres" Fill="rgb(220,53,69)" CategoryProperty="Hora" Title="Processados com Erro" LineType="LineType.Dashed" ValueProperty="Quantidade" />
                        <RadzenColumnSeries Data="@um" Fill="rgb(108,117,125)" CategoryProperty="Hora" Title="Sem Lotes" LineType="LineType.Dashed" ValueProperty="Quantidade" />
                        <RadzenColumnSeries Data="@dois" Fill="rgb(25,135,84)" CategoryProperty="Hora" Title="Processados com Sucesso" LineType="LineType.Dashed" ValueProperty="Quantidade" />
                        <RadzenColumnSeries Data="@quatro" Fill="rgb(225,193,7)" CategoryProperty="Hora" Title="Aguardando Processamento" LineType="LineType.Dashed" ValueProperty="Quantidade" />
                        <RadzenColumnOptions Margin="0" />
                    </RadzenChart>
                </div>
            </div>
        </div>
    </div>
}

@code {

    IEnumerable<ColorScheme> colorSchemes = Enum.GetValues(typeof(ColorScheme)).Cast<ColorScheme>();
    ColorScheme colorScheme = ColorScheme.Palette;

    IEnumerable<Prefeitura> filtro;

    IEnumerable<Grafico> grafico;
    IEnumerable<Grafico> grafico2;
    IList<Grafico> grafico3;
    IEnumerable<Grafico> teste;

    List<Grafico> um = new List<Grafico>();
    List<Grafico> dois = new List<Grafico>();
    List<Grafico> tres = new List<Grafico>();
    List<Grafico> quatro = new List<Grafico>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            grafico = await GraficoServico.TopPrefeituras();
            grafico2 = await GraficoServico.Teste();
            //grafico3 = await GraficoServico.Teste();

            foreach (var item in grafico2)
            {
                if(item.Situacao == "Sem Lotes")
                {
                    um.Add(item);
                }
                if (item.Situacao == "Processados com Sucesso")
                {
                    dois.Add(item);
                }
                if (item.Situacao == "Processados com Erro")
                {
                    tres.Add(item);
                }
                if (item.Situacao == "Aguardando Processamento")
                {
                    quatro.Add(item);
                }
            }
        }
        catch (Exception e)
        {
            throw;
        }
    }
}
